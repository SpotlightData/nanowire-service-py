name: build

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8.5"]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2.2.1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install poetry
      run: make download-poetry

    - name: Set up cache
      uses: actions/cache@v2.1.3
      with:
        path: .venv
        key: venv-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('poetry.lock') }}

    - name: Install dependencies
      run: |
        source "$HOME/.poetry/env"
        poetry config virtualenvs.in-project true
        poetry install

    - name: Run style checks
      run: |
        source "$HOME/.poetry/env"
        STRICT=1 make check-style

    - name: Run tests
      run: |
        source "$HOME/.poetry/env"
        make test
    
    - name: Build
      run: |
        source "$HOME/.poetry/env"
        poetry build
    
    - name: upload artifacts
      uses: actions/upload-artifact@master
      with:
        name: wheels
        path: ./dist
  
  publish:
    name: "Publish releases"
    needs: build
    runs-on: ubuntu-latest
    # if: startswith(github.ref, 'refs/tags/')
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.8.5
      uses: actions/setup-python@v2.2.1
      with:
        python-version: 3.8.5

    - name: Install poetry
      run: make download-poetry
      
    - name: Download artifacts
      uses: actions/download-artifact@master
      with:
        name: wheels
        path: ./dist
   
    - name: Publish
      run: |
        source "$HOME/.poetry/env"
        poetry publish -u ${{ secrets.PYPY_USERNAME }} -p ${{ secrets.PYPY_PASSWORD }}
